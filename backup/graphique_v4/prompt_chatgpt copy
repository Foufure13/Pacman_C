#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <SDL2/SDL.h>

// Constantes pour la taille de la fenêtre et des sprites
const int SCREEN_WIDTH = 640;
const int SCREEN_HEIGHT = 480;
const int SPRITE_SIZE = 32;

// Constantes pour les directions
const int DIR_NONE = 0;
const int DIR_UP = 1;
const int DIR_DOWN = 2;
const int DIR_LEFT = 3;
const int DIR_RIGHT = 4;

// Structure pour représenter un sprite
typedef struct {
    int x;
    int y;
    int direction;
    SDL_Texture* texture;
} Sprite;

// Initialiser le jeu
int init_game(SDL_Window** window, SDL_Renderer** renderer, Sprite* pacman, Sprite* ghosts) {
    // Initialiser SDL
    if (SDL_Init(SDL_INIT_VIDEO) < 0) {
        fprintf(stderr, "Erreur lors de l'initialisation de SDL : %s\n", SDL_GetError());
        return 0;
    }

    // Créer la fenêtre
    *window = SDL_CreateWindow("Pacman",
                               SDL_WINDOWPOS_UNDEFINED,
                               SDL_WINDOWPOS_UNDEFINED,
                               SCREEN_WIDTH,
                               SCREEN_HEIGHT,
                               SDL_WINDOW_SHOWN);
    if (*window == NULL) {
        fprintf(stderr, "Erreur lors de la création de la fenêtre : %s\n", SDL_GetError());
        return 0;
    }

    // Créer le renderer
    *renderer = SDL_CreateRenderer(*window, -1, SDL_RENDERER_ACCELERATED);
    if (*renderer == NULL) {
        fprintf(stderr, "Erreur lors de la création du renderer : %s\n", SDL_GetError());
        return 0;
    }

    // Charger les textures
    SDL_Surface* surface = SDL_LoadBMP("pacman.bmp");
    if (surface == NULL) {
        fprintf(stderr, "Erreur lors du chargement de l'image : %s\n", SDL_GetError());
        return 0;
    }
    SDL_Texture* texture = SDL_CreateTextureFromSurface(*renderer, surface);
    if (texture == NULL) {
        fprintf(stderr, "Erreur lors de la création de la texture : %s\n", SDL_GetError());
        return 0;
    }
    SDL_FreeSurface(surface);

    // Initialiser les sprites
    *pacman = (Sprite){ SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2, DIR_NONE, texture };
    ghosts[0] = (Sprite){ SCREEN_WIDTH / 2 - SPRITE_SIZE, SCREEN_HEIGHT / 2 - SPRITE_SIZE, DIR_NONE, texture };
    ghosts[1] = (Sprite){ SCREEN_WIDTH / 2 + SPRITE_SIZE, SCREEN_HEIGHT / 2 - SPRITE_SIZE, DIR_NONE, texture };
    ghosts[2] = (Sprite){ SCREEN_WIDTH / 2 - SPRITE_SIZE, SCREEN_HEIGHT / 2 + SPRITE_SIZE, DIR_NONE, texture };
    ghosts[3] = (Sprite){ SCREEN_WIDTH / 2 + SPRITE_SIZE, SCREEN_HEIGHT / 2 + SPRITE_SIZE, DIR_NONE, texture };

    return 1;
}

// Déplacer un sprite en fonction de sa direction
void move_sprite(Sprite* sprite) {
    switch (sprite->direction) {
        case DIR_UP:
            sprite->y -= SPRITE_SIZE;
            break;
        case DIR_DOWN:
            sprite->y += SPRITE_SIZE;
            break;
        case DIR_LEFT:
            sprite->x -= SPRITE_SIZE;
            break;
        case DIR_RIGHT:
            sprite->x += SPRITE_SIZE;
            break;
        default:
            break;
    }
}

// Dessiner un sprite sur le renderer
void draw_sprite(SDL_Renderer* renderer, Sprite* sprite) {
    SDL_Rect rect = { sprite->x, sprite->y, SPRITE_SIZE, SPRITE_SIZE };
    SDL_RenderCopy(renderer, sprite->texture, NULL, &rect);
}





// Libérer les ressources allouées pour le jeu
void cleanup_game(SDL_Window* window, SDL_Renderer* renderer, Sprite* pacman, Sprite* ghosts) {
    SDL_DestroyTexture(pacman->texture);
    SDL_DestroyTexture(ghosts[0].texture);
    SDL_DestroyTexture(ghosts[1].texture);
    SDL_DestroyTexture(ghosts[2].texture);
    SDL_DestroyTexture(ghosts[3].texture);

        // Détruire le renderer et la fenêtre
        SDL_DestroyRenderer(renderer);
        SDL_DestroyWindow(window);
}

int main(int argc, char* args[]) {
    SDL_Window* window;
    SDL_Renderer* renderer;
    Sprite pacman, ghosts[4];

    if (!init_game(&window, &renderer, &pacman, ghosts)) {
        return 1;
    }

    int quit = 0;
    SDL_Event e;

    while (!quit) {
        while (SDL_PollEvent(&e) != 0) {
            if (e.type == SDL_QUIT) {
                quit = 1;
            } else if (e.type == SDL_KEYDOWN) {
                switch (e.key.keysym.sym) {
                    case SDLK_UP:
                        pacman.direction = DIR_UP;
                        break;
                    case SDLK_DOWN:
                        pacman.direction = DIR_DOWN;
                        break;
                    case SDLK_LEFT:
                        pacman.direction = DIR_LEFT;
                        break;
                    case SDLK_RIGHT:
                        pacman.direction = DIR_RIGHT;
                        break;
                }
            }
        }

        move_sprite(&pacman);
        for (int i = 0; i < 4; i++) {
            move_sprite(&ghosts[i]);
        }

        SDL_RenderClear(renderer);
        draw_sprite(renderer, &pacman);
        for (int i = 0; i < 4; i++) {
            draw_sprite(renderer, &ghosts[i]);
        }
        SDL_RenderPresent(renderer);
    }

    cleanup_game(window, renderer, &pacman, ghosts);
    SDL_Quit();

    return 0;
}

