#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <SDL2/SDL.h>

#define SCREEN_WIDTH 640
#define SCREEN_HEIGHT 480
#define TILE_SIZE 32
#define PACMAN_SPEED 4

typedef struct {
    int x;
    int y;
} Position;

typedef struct {
    SDL_Texture* texture;
    Position position;
    int width;
    int height;
} Sprite;

SDL_Window* window = NULL;
SDL_Renderer* renderer = NULL;
Sprite pacman;
Position ghost_position;

void initialize(void) {
    SDL_Init(SDL_INIT_VIDEO);
    window = SDL_CreateWindow("Pac-Man", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_SHOWN);
    renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED);

    SDL_Surface* surface = SDL_LoadBMP("pacman.bmp");
    pacman.texture = SDL_CreateTextureFromSurface(renderer, surface);
    SDL_FreeSurface(surface);
    pacman.width = TILE_SIZE;
    pacman.height = TILE_SIZE;
    pacman.position.x = SCREEN_WIDTH / 2;
    pacman.position.y = SCREEN_HEIGHT / 2;

    ghost_position.x = SCREEN_WIDTH / 4;
    ghost_position.y = SCREEN_HEIGHT / 4;
}

void handle_events(void) {
    SDL_Event event;
    while (SDL_PollEvent(&event)) {
        if (event.type == SDL_QUIT) {
            exit(0);
        }
    }

    const Uint8* state = SDL_GetKeyboardState(NULL);
    if (state[SDL_SCANCODE_LEFT]) {
        pacman.position.x -= PACMAN_SPEED;
    }
    if (state[SDL_SCANCODE_RIGHT]) {
        pacman.position.x += PACMAN_SPEED;
    }
    if (state[SDL_SCANCODE_UP]) {
        pacman.position.y -= PACMAN_SPEED;
    }
    if (state[SDL_SCANCODE_DOWN]) {
        pacman.position.y += PACMAN_SPEED;
    }
}

void draw(void) {
    SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255);
    SDL_RenderClear(renderer);

    SDL_Rect pacman_rect = { pacman.position.x, pacman.position.y, pacman.width, pacman.height };
    SDL_RenderCopy(renderer, pacman.texture, NULL, &pacman_rect);

    SDL_SetRenderDrawColor(renderer, 255, 0, 0, 255);
    SDL_Rect ghost_rect = { ghost_position.x, ghost_position.y, TILE_SIZE, TILE_SIZE };
    SDL_RenderFillRect(renderer, &ghost_rect);

    SDL_RenderPresent(renderer);
}

void cleanup(void) {
    SDL_DestroyTexture(pacman.texture);
    SDL_DestroyRenderer(renderer);
    SDL_DestroyWindow(window);
    SDL_Quit();
}

int main(int argc, char** argv) {
    initialize();

    while (true) {
        handle_events();
        draw();
    }

    cleanup();
    return 0;
}
